// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdlib.h>
#include <stdio.h>
#include "I2C.h"
#include "pwm.h"
#include "LCD.h"
#include "UART.h"

#define _XTAL_FREQ 8000000
#define RS RE0
#define EN RE1
#define D4 RD4
#define D5 RB5
#define D6 RD6
#define D7 RD7


#define min  0x01
#define sec  0x00

char min_str [3];
char sec_str [3];
static char Time[] = "00";

void setup(void);
uint8_t mdc, ultrarojo;
uint8_t cont, ban, estado, s;
uint8_t sec_ant = 0;
uint8_t sec_act = 0;
uint8_t min_act = 0;
uint8_t seg_decimal = 0;
uint8_t min_decimal = 0;
uint8_t data;

uint8_t bcd_to_decimal(uint8_t bcd) {
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
}

void __interrupt() isr(){
    if(PIR1bits.RCIF){
        data = RCREG;
        //string("HOLA");
        PIR1bits.RCIF = 0;
        
    }
}

void main(void)
{
    setup();
    PWM_Init();
    Lcd_Init();
    unsigned int a;
    while(1)
    {
        I2C_Master_Start();             // Iniciamos la comunicacion I2C
        I2C_Master_Write(0x51);         // Seleccionamos a la direccion del primer PIC
        mdc = I2C_Master_Read(0);       // Cargamos el valor enviado desde el primer PIC
        if(mdc == 1 && estado == 0)     // Verificacion de estados
        {
            CCPR1L = cont;              // Cargamos al CCPR1L el valor de contador para el servomotor
            if (cont > 220)            // Se hace verificaciones de banderas para que el servomotor
            {                           // se vuelva a su posicion original cuando cont = 0
                ban = 0;
            }
            if (cont == 0)
            {
                ban = 1;
            }
            if (ban == 1)
            {
                cont += 20;
                PORTB = cont;
            }
            if (ban == 0) 
            {
                cont -= 20;
                PORTB = cont;
            }
            string("2");
            
        }
        else 
        {
            CCPR1L = 0;
            string("0");
        }
        I2C_Master_Stop();
        __delay_ms(200);            // Paramos la comunicacion I2C y seteamos un delay de 2 segundos
        
        //------------------------------------------------------------------------------------------
        I2C_Master_Start();
        I2C_Master_Write(0x53);
        ultrarojo = I2C_Master_Read(0);
        if(ultrarojo == 1 || data == 1)
        {
            estado = 1;
            CCPR2L = 100;
            string("1");
            
        }
        else 
        {
            estado = 0;
            CCPR2L = 0;
            string("3");
        }
        I2C_Master_Stop();
        __delay_ms(200);
        
        
        // LCD
        
       Lcd_Clear();                         // Iniciar la LCD
       Lcd_Set_Cursor(1,1);                 // Posicion del cursor
       Lcd_Write_String("Time:");            // Caracter a mostrar
       Lcd_Set_Cursor(2,1);
       if (ultrarojo == 1)
       { 
            I2C_Master_Start();                // Iniciar el I2C
            I2C_Master_Write(0xD0);            // Escribir la dirección del RTC para escritura
            I2C_Master_Write(sec);             // Seleccionar los segundos
            I2C_Master_RepeatedStart();        // Reiniciar el I2C
            I2C_Master_Write(0xD1);            // Escribir la dirección del RTC para lectura
            sec_act = I2C_Master_Read(0);      // Leer los segundos
            I2C_Master_Stop();

            I2C_Master_Start();                // Iniciar el I2C nuevamente
            I2C_Master_Write(0xD0);            // Escribir la dirección del RTC para escritura
            I2C_Master_Write(min);             // Seleccionar los minutos
            I2C_Master_RepeatedStart();        // Reiniciar el I2C
            I2C_Master_Write(0xD1);            // Escribir la dirección del RTC para lectura
            min_act = I2C_Master_Read(0); // Leer los minutos
            I2C_Master_Stop();

            seg_decimal = bcd_to_decimal(sec_act);
            Time[0] = seg_decimal / 10 + '0';
            Time[1] = seg_decimal % 10 + '0';   // Convertir el valor de segundos a cadena

            min_decimal = bcd_to_decimal(min_act);
            min_str[0] = min_decimal / 10 + '0';
            min_str[1] = min_decimal % 10 + '0'; // Convertir el valor de minutos a cadena

            Lcd_Set_Cursor(2,1);                 // Posicionar el cursor en la primera línea
            Lcd_Write_String(min_str);           // Mostrar los minutos en la pantalla
            Lcd_Write_Char(':');                 // Mostrar el caracter ':' en la pantalla
            Lcd_Write_String(Time);              // Mostrar los segundos en la pantalla

            __delay_ms(1000);
       }
       else
       {
           Lcd_Set_Cursor(2,1);                 // Posicionar el cursor en la primera línea
           Lcd_Write_String(min_str);           // Mostrar los minutos en la pantalla
           Lcd_Write_Char(':');                 // Mostrar el caracter ':' en la pantalla
           Lcd_Write_String(Time);              // Mostrar los segundos en la pantalla
       }
       Lcd_Set_Cursor(1,7);                 // Posicion del cursor
       Lcd_Write_String("Servo:");            // Caracter a mostrar
       Lcd_Set_Cursor(2,7);
       if (mdc == 1 && estado == 0)
       {
           Lcd_Write_String("On");
       }
       else 
       {
          Lcd_Write_String("Off"); 
       }
       
       Lcd_Set_Cursor(1,14);                 // Posicion del cursor
       Lcd_Write_String("DC:");            // Caracter a mostrar
       Lcd_Set_Cursor(2,14);
       if (ultrarojo == 1)
       {
           Lcd_Write_String("On");
       }
       else 
       {
           Lcd_Write_String("Off");
       }
        __delay_ms(1000);
    }
    return;
}
void setup(void)
{
    ANSEL = 0;
    ANSELH = 0;
    
    TRISA = 0;
    TRISB = 0;
    TRISD = 0;
    TRISE = 0;
    PORTA = 0;
    PORTB = 0;
    PORTD = 0;
    PORTE = 0;
    
    OSCCONbits.IRCF = 0b111; //8 MHz
    OSCCONbits.SCS = 1;
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    PIE1bits.RCIE = 1;
    PIR1bits.RCIF = 0;
    initUART(8);
    I2C_Master_Init(100000);        // Inicializar Comuncación I2C
}
